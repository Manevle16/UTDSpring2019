n
n <- 300
n
names(temps) <- c('Mon','Tue','Wed','Thu','Fri')
temps <- c(72,71,68,65,75,71)
temps
names(temps) <- c('Mon','Tue','Wed','Thu','Fri')
temps
n
temps <- c'Mon','Tue','Wed','Thu','Fri')
n
temps <- c('Mon','Tue','Wed','Thu','Fri')
temps
names(temps) <- c(72,71,68,65,75,71)
n
temps <- c('Mon','Tue','Wed','Thu','Fri')
temps
names(temps) <- c(72,71,68,65,75)
temps
n
temps <- c('Mon','Tue','Wed','Thu','Fri')
temps
temps
temps[1]
temps[1]
temps[2:4]
temps[1]
temps[2:]
temps[1]
temps[2,]
n <- 1:10
n
matrix(n)
matrix(n)
matrix(n)
matrix(n,nrow=2)
matrix(1:12, byrow = FALSE, nrow=4)
matrix(1:12, byrow = FALSE, nrow=4)
matrix(1:12, byrow = TRUE, nrow=4)
?matrix
matrix(1:12, byrow = FALSE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by column
mat <- matrix(1:12, byrow = TRUE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by row
mat <- matrix(1:12, byrow = TRUE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by row
view(mat)
view(mat)
View(mat)
mat*mat
mat%*%mat
mat1 <- matrix(1:12, byrow = FALSE, nrow=3) #Creates matrix with 12 values and 4 rows which counts by column
mat2 <- matrix(1:12, byrow = TRUE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by row
mat1*mat1
mat1%*%mat2
View(mat1)
mat1[1,]
mat1[1:3,]
mat1[1:3,]
mat1[1,1:3]
mat1[1,1:3]
data.frame(mat1)
state.x77
state.x77
states <- state.x77
View(states)
u <- USPersonalExpenditure
u <- USPersonalExpenditure
w <- women
head(states)
View(w)
setwd("C:/Users/Manev/github/Manevle16/UTDSpring2019/MachineLearning/Lessons/Feb19")
library(ISLR)
# Insurance Policy Purchase
str(Caravan)
summary(Caravan$Purchase) # only 6% purchased the policy
# 348/5474
any(is.na(Caravan)) # none
348/5474
var(Caravan[,1])
var(Caravan[,2])
# save the Purchase column in a separate variable
purchase <- Caravan[,86]
# Standarize the dataset using "scale()" R function
print(head(Caravan))
standardized.Caravan <- scale(Caravan[,-86])
var(standardized.Caravan[,1])
var(standardized.Caravan[,2])
print(head(standardized.Caravan))
# Train Test Split
# First 1000 rows for test set
test.index <- 1:1000
test.data <- standardized.Caravan[test.index,]
test.purchase <- purchase[test.index]
# Rest of data for training
train.data <- standardized.Caravan[-test.index,]
train.purchase <- purchase[-test.index]
# KNN Model
library(class) # contains KNN function
set.seed(101)
predicted.purchase <- knn(train.data,test.data,train.purchase,k=1)
head(predicted.purchase)
error.rate <- mean(test.purchase != predicted.purchase)
print(error.rate)
# try the model with K = 3 and K = 5
predicted.purchase <- knn(train.data,test.data,train.purchase,k=3)
error.rate <- mean(test.purchase != predicted.purchase)
print(error.rate)
head(predicted.purchase)
predicted.purchase <- knn(train.data,test.data,train.purchase,k=5)
error.rate <- mean(test.purchase != predicted.purchase)
print(error.rate)
head(predicted.purchase)
###
# Choosing a K value
###
predicted.purchase <- NULL
for(i in 1:20){
set.seed(101)
predicted.purchase = knn(train.data,test.data,train.purchase,k=i)
error.rate[i] = mean(test.purchase != predicted.purchase)
}
print(error.rate)
###
# VISUALIZE K ELBOW METHOD
###
library(ggplot2)
k.values <- 1:20
error.df <- data.frame(error.rate,k.values)
error.df
pl <- ggplot(error.df,aes(x=k.values,y=error.rate))
pl <- pl + geom_point()+ geom_line(lty="dotted",color='red')
pl
# The optimal K based on pl
predicted.purchase <- knn(train.data,test.data,train.purchase,k=9)
error.rate <- mean(test.purchase != predicted.purchase)
print(error.rate)
install.packages('rpart')
library(rpart)
help(rpart)
str(kyphosis)
head(kyphosis)
