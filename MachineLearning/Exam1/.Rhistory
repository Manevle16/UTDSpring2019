n
n <- 300
n
names(temps) <- c('Mon','Tue','Wed','Thu','Fri')
temps <- c(72,71,68,65,75,71)
temps
names(temps) <- c('Mon','Tue','Wed','Thu','Fri')
temps
n
temps <- c'Mon','Tue','Wed','Thu','Fri')
n
temps <- c('Mon','Tue','Wed','Thu','Fri')
temps
names(temps) <- c(72,71,68,65,75,71)
n
temps <- c('Mon','Tue','Wed','Thu','Fri')
temps
names(temps) <- c(72,71,68,65,75)
temps
n
temps <- c('Mon','Tue','Wed','Thu','Fri')
temps
temps
temps[1]
temps[1]
temps[2:4]
temps[1]
temps[2:]
temps[1]
temps[2,]
n <- 1:10
n
matrix(n)
matrix(n)
matrix(n)
matrix(n,nrow=2)
matrix(1:12, byrow = FALSE, nrow=4)
matrix(1:12, byrow = FALSE, nrow=4)
matrix(1:12, byrow = TRUE, nrow=4)
?matrix
matrix(1:12, byrow = FALSE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by column
mat <- matrix(1:12, byrow = TRUE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by row
mat <- matrix(1:12, byrow = TRUE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by row
view(mat)
view(mat)
View(mat)
mat*mat
mat%*%mat
mat1 <- matrix(1:12, byrow = FALSE, nrow=3) #Creates matrix with 12 values and 4 rows which counts by column
mat2 <- matrix(1:12, byrow = TRUE, nrow=4) #Creates matrix with 12 values and 4 rows which counts by row
mat1*mat1
mat1%*%mat2
View(mat1)
mat1[1,]
mat1[1:3,]
mat1[1:3,]
mat1[1,1:3]
mat1[1,1:3]
data.frame(mat1)
state.x77
state.x77
states <- state.x77
View(states)
u <- USPersonalExpenditure
u <- USPersonalExpenditure
w <- women
head(states)
View(w)
setwd("C:/Users/Manev/github/Manevle16/UTDSpring2019/MachineLearning/Exam1")
install.packages('ISLR')
#(a)
library(ISLR)
Auto
df <- Auto
names(df)
summary(df)
#(b)
model <- lm(mpg ~ horsepower, df)
summary(model)
#(c)
predict(model, 98)
#(c)
predict(model, horsepower = 98)
?predict
#(c)
predict(model, df, horsepower = 98)
#(c)
predict(model, data.frame(horsepower = 98))
#(c)
predict(model, data.frame(horsepower = c(98)))
#(c)
predict(model, data.frame(horsepower = 98))
predict(model, data.frame(horsepower = 98), interval = "confidence")
?plot
plot(df$horsepower, df$mpg)
abline()
abline(reg)
abline(model)
?plot
#(e)
par(mfrow=c(2,2))
abline(model)
plot(df$horsepower, df$mpg)
abline(model)
plot(df$horsepower, df$mpg)
abline(model)
plot(df$horsepower, df$mpg)
abline(model)
abline(model)
plot(df$horsepower, df$mpg)
abline(model)
#(e)
#Not sure what 2x2 arrangement means, so i plotted the above graph 4 times in a 2x2 arrangement with the fit line
par(mfrow=c(2,2))
plot(df$horsepower, df$mpg)
plot(df$horsepower, df$mpg)
plot(df$horsepower, df$mpg)
plot(df$horsepower, df$mpg)
abline(model)
for(int i = 0; i < 4; i++){
plot(df$horsepower, df$mpg)
abline(model)
}
#(e)
#Not sure what 2x2 arrangement means, so i plotted the above graph 4 times in a 2x2 arrangement with the fit line
par(mfrow=c(2,2))
for(i in 1:4){
plot(df$horsepower, df$mpg)
abline(model)
}
#**************** Problem 2 **********************************
pairs(Auto)
#(b)
cor(Auto)
head(Auto)
#(b)
cor(select(Auto, -name))
#**************** Problem 2 **********************************
library(dplyr)
#(b)
cor(select(Auto, -name))
#(a)
pairs(df)
#(b)
cor(select(df, -name))
#(c)
model <- lm(mpg ~ -name, df)
summary(model)
#(c)
model <- lm(mpg ~ . -name, df)
summary(model)
#(b)
model <- lm(mpg ~ horsepower, df)
summary(model)
#(c)
model <- lm(mpg ~ . -name, df)
summary(model)
#(d)
par(mfrow=c(2,2))
#The significant predictors of mpg are displacement, weight, year, and orgin.
fitted(model)
#Residuals vs Fitted
plot(residuals(model), fitted(model))
#(d)
par(mfrow=c(2,2))
#Residuals vs Fitted
plot(fitted(model), residuals(model))
abline(fitted(model), residuals(model))
abline(model)
x0 <- seq(min(fitted(model)), max(fitted(model)), length = 20)  ## prediction grid
y0 <- predict.lm(model, newdata = list(fitted(model) = x0))  ## predicted values
y0 <- predict.lm(model, newdata = list(fitted(model) == x0))  ## predicted values
#
plot(model, which = 2)
#(d)
par(mfrow=c(2,2))
#Residuals vs Fitted
plot(lm.good, which = 1)
#Residuals vs Fitted
plot(model, which = 1)
#
plot(model, which = 2)
plot(model, which = 3)
plot(model, which = 4)
#(e)
library(ggplot2)
View(df)
View(df)
#(e)
#This is a very vague question.
newModel <- lm(mpg ~ +displacement * weight, df)
#(f)
model <- lm(mpg ~ +log(weight) +sqrt(horsepower) + acceleration + acceleration^2,df)
summary(model)
plot(model, which = 1)
#(g)
model2 <- lm(log(mpg) ~ . -name, df)
#(f)
model <- lm(mpg ~ +log(weight) +sqrt(horsepower) + acceleration + I(acceleration^2),df)
summary(model)
plot(model, which = 1)
